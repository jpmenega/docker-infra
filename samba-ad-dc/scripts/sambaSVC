#!/bin/bash
#
# Resource script for samba daemon
#
# Description:  Manages samba daemon as an OCF resource in
#               an High Availability setup.
#
#       usage: $0 {start|stop|status|monitor|validate-all|meta-data}
#
#       The "start" arg starts samba.
#
#       The "stop" arg stops it.
#
# OCF parameters:
# OCF_RESKEY_binpath
# OCF_RESKEY_conffile
# OCF_RESKEY_extraconf
#
# Note:This RA requires that the samba config files has a "pidfile"
# entry so that it is able to act on the correct process
##########################################################################
# Initialization:

: ${OCF_FUNCTIONS_DIR=${OCF_ROOT}/resource.d/heartbeat}
. ${OCF_FUNCTIONS_DIR}/.ocf-shellfuncs

USAGE="Usage: $0 {start|stop|status|monitor|validate-all|meta-data}";

##########################################################################

usage()
{
        echo $USAGE >&2
}

meta_data()
{
cat <<END
<?xml version="1.0"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="samba">
<version>1.0</version>
<longdesc lang="en">
This script manages samba daemon
</longdesc>
<shortdesc lang="en">Manages an samba daemon</shortdesc>

<parameters>

<parameter name="binpath">
<longdesc lang="en">
The samba binary path.
For example, "/usr/sbin/samba"
</longdesc>
<shortdesc lang="en">Full path to the samba binary</shortdesc>
<content type="string" default="/usr/sbin/samba"/>
</parameter>

<parameter name="conffile">
<longdesc lang="en">
The samba daemon configuration file name with full path.
For example, "/etc/samba/smb.conf"
</longdesc>
<shortdesc lang="en">Configuration file name with full path</shortdesc>
<content type="string" default="/etc/samba/smb.conf" />
</parameter>

</parameters>

<actions>
<action name="start" timeout="20s"/>
<action name="stop" timeout="20s"/>
<action name="monitor" depth="0" timeout="20s" interval="60s" />
<action name="validate-all" timeout="20s"/>
<action name="meta-data"  timeout="5s"/>
</actions>
</resource-agent>
END
exit $OCF_SUCCESS
}

get_pid_and_conf_file()
{
        if [ -n "$OCF_RESKEY_conffile" ]; then
                CONF_FILE=$OCF_RESKEY_conffile
        else
                CONF_FILE="/etc/samba/smb.conf"
        fi

        PIDFILE="`grep -v \"#\" ${CONF_FILE} | grep \"pidfile\" | sed 's/^[ \t]*pidfile[ \t]*//'`"
        if [ "${PIDFILE}" = '' ]; then
                PIDFILE="/var/run/samba/samba.pid"
        fi
}

samba_status()
{
        if [ -n "$PIDFILE" -a -f "$PIDFILE" ]; then
                # samba is probably running
                PID=`cat $PIDFILE`
                if [ -n "$PID" ]; then
                        if ps -p $PID | grep samba >/dev/null ; then
                                ocf_log info "info samba daemon running"
                                return $OCF_SUCCESS
                        else
                                ocf_log info "samba daemon is not running but pid file exists"
                                return $OCF_NOT_RUNNING
                        fi
                else
                        ocf_log err "PID file empty!"
                        return $OCF_ERR_GENERIC
                fi
        fi

        # samba is not running
        ocf_log info "samba daemon is not running"
        return $OCF_NOT_RUNNING
}

samba_setup () {

        # Set variables
        DOMAIN=${DOMAIN:-MC.INTRANET}
        DOMAINPASS=${DOMAINPASS:-PASSWORD}
        JOIN=${JOIN:-false}
        JOINSITE=${JOINSITE:-NONE}
        MULTISITE=${MULTISITE:-false}
        NOCOMPLEXITY=${NOCOMPLEXITY:-false}
        INSECURELDAP=${INSECURELDAP:-false}
        DNSFORWARDER=${DNSFORWARDER:-192.168.1.1}
        HOSTIP=${HOSTIP:-192.168.1.249}

        LDOMAIN=${DOMAIN,,}
        UDOMAIN=${DOMAIN^^}
        URDOMAIN=${UDOMAIN%%.*}

        # If multi-site, we need to connect to the VPN before joining the domain
        if [[ ${MULTISITE,,} == "true" ]]; then
                /usr/sbin/openvpn --config /docker.ovpn &
                VPNPID=$!
                echo "Sleeping 30s to ensure VPN connects ($VPNPID)";
                sleep 30
        fi

        # Set host ip option
        if [[ "$HOSTIP" != "NONE" ]]; then
                HOSTIP_OPTION="--host-ip=$HOSTIP"
        else
                HOSTIP_OPTION=""
        fi

        # Set up samba
        mv /etc/krb5.conf /etc/krb5.conf.orig
        echo "[libdefaults]" > /etc/krb5.conf
        echo "    dns_lookup_realm = false" >> /etc/krb5.conf
        echo "    dns_lookup_kdc = true" >> /etc/krb5.conf
        echo "    default_realm = ${UDOMAIN}" >> /etc/krb5.conf
        # If the finished file isn't there, this is brand new, we're not just moving to a new container
        if [[ ! -f /var/lib/samba/smb.conf ]]; then
                mv /etc/samba/smb.conf /etc/samba/smb.conf.orig
                if [[ ${JOIN,,} == "true" ]]; then
                        if [[ ${JOINSITE} == "NONE" ]]; then
                                samba-tool domain join ${LDOMAIN} DC -U"${URDOMAIN}\administrator" --password="${DOMAINPASS}" --dns-backend=SAMBA_INTERNAL
                        else
                                samba-tool domain join ${LDOMAIN} DC -U"${URDOMAIN}\administrator" --password="${DOMAINPASS}" --dns-backend=SAMBA_INTERNAL --site=${JOINSITE}
                        fi
                else
                        #samba-tool domain provision --use-rfc2307 --domain=${URDOMAIN} --realm=${UDOMAIN} --server-role=dc --dns-backend=SAMBA_INTERNAL --adminpass=${DOMAINPASS} --use-ntvfs ${HOSTIP_OPTION} --option "log file = /var/log/samba/%m.log" --option "max log size = 10000"
                        samba-tool domain provision --use-rfc2307 --domain=${URDOMAIN} --realm=${UDOMAIN} --server-role=dc --dns-backend=SAMBA_INTERNAL --adminpass=${DOMAINPASS} ${HOSTIP_OPTION} --option "log file = /var/log/samba/%m.log" --option "max log size = 10000"
                        if [[ ${NOCOMPLEXITY,,} == "true" ]]; then
                                samba-tool domain passwordsettings set --complexity=off
                                samba-tool domain passwordsettings set --history-length=0
                                samba-tool domain passwordsettings set --min-pwd-age=0
                                samba-tool domain passwordsettings set --max-pwd-age=0
                        fi
                fi
                sed -i "/\[global\]/a \
                        \\\tidmap_ldb:use rfc2307 = yes\\n\
                        wins support = yes\\n\
                        template shell = /bin/bash\\n\
                        winbind nss info = rfc2307\
                        " /etc/samba/smb.conf
                if [[ $DNSFORWARDER != "NONE" ]]; then
                        sed -i "/\[global\]/a \
                                \\\tdns forwarder = ${DNSFORWARDER}\
                                " /etc/samba/smb.conf
                fi
                if [[ ${INSECURELDAP,,} == "true" ]]; then
                        sed -i "/\[global\]/a \
                                \\\tldap server require strong auth = no\
                                " /etc/samba/smb.conf
                fi
                # Once we are set up, we'll make a file so that we know to use it if we ever spin this up again
                cp /etc/samba/smb.conf /var/lib/samba/smb.conf
        else
                cp /var/lib/samba/smb.conf /etc/samba/smb.conf
        fi
}


samba_start()
{
        # if samba is running return success
        samba_status
        retVal=$?
        if [ $retVal -eq $OCF_SUCCESS ]; then
                exit $OCF_SUCCESS
        elif [ $retVal -ne $OCF_NOT_RUNNING ]; then
                ocf_log err "Error. Unknown status."
                exit $OCF_ERR_GENERIC
        fi

        if [ -n "$OCF_RESKEY_binpath" ]; then
                COMMAND="$OCF_RESKEY_binpath"
        else
                COMMAND="/usr/sbin/samba"
        fi

        #HEALTHY_BRICKS=$(gluster volume heal volume-samba info summary| grep -A4 "Brick $HOSTNAME"|grep "Number of entries in split-brain: 0"|wc -l)
        #if [ $HEALTHY_BRICKS != 1 ]; then
        #        ocf_log err "Error. GlusterFS is unhealthy, try manual heal to fix."
        #        exit $OCF_ERR_GENERIC
        #fi

        #if ! (grep -qs '/var/lib/samba ' /proc/mounts;) then
        #        mount -t glusterfs -o acl localhost:volume-samba /var/lib/samba
        #        if ! (grep -qs '/var/lib/samba ' /proc/mounts;) then
        #            ocf_log err "Error. Can't mount glusterfs partition."
        #            exit $OCF_ERR_GENERIC
        #        fi
        #fi

        #if ! (grep -qs '/var/lib/samba-shares ' /proc/mounts;) then
        #        mount -t glusterfs -o acl localhost:volume-shares /var/lib/samba-shares
        #        if ! (grep -qs '/var/lib/samba-shares ' /proc/mounts;) then
        #            ocf_log err "Error. Can't mount glusterfs partition."
        #            exit $OCF_ERR_GENERIC
        #        fi
        #fi

	drbdadm primary samba --force
        retVal=$?
        if [ $retVal -ne 0 ]; then
                ocf_log err "Error. Can't bring DRBD node as primary."
                exit $OCF_ERR_GENERIC
        fi

        if ! (grep -qs '/var/lib/samba ' /proc/mounts;) then
                mount -o acl /dev/<drbd_samba_volume> /var/lib/samba
                if ! (grep -qs '/var/lib/samba ' /proc/mounts;) then
                    ocf_log err "Error. Can't mount samba DRBD partition."
                    exit $OCF_ERR_GENERIC
                fi
        fi

        samba_setup

        $COMMAND -s $CONF_FILE;
        if [ $? -ne 0 ]; then
                ocf_log err "Error. samba daemon returned error $?."
                exit $OCF_ERR_GENERIC
        fi

        ocf_log info "Started samba daemon."
        exit $OCF_SUCCESS
}


samba_stop()
{
	if samba_status ; then
                killall samba
                sleep 1
                killall samba
                sleep 2
        fi
        umount -f /var/lib/samba
        drbdadm secondary samba

        ocf_log info "Stopped samba daemon."
        exit $OCF_SUCCESS
}

samba_monitor()
{
        samba_status
}

samba_validate_all()
{
        if [ -n "$OCF_RESKEY_binpath" -a ! -x "$OCF_RESKEY_binpath" ]; then
                ocf_log err "Binary path $OCF_RESKEY_binpath does not exist."
                exit $OCF_ERR_ARGS
        fi
        if [ -n "$OCF_RESKEY_conffile" -a ! -f "$OCF_RESKEY_conffile" ]; then
                ocf_log err "Config file $OCF_RESKEY_conffile does not exist."
                exit $OCF_ERR_ARGS
        fi

        #if  grep -v "^#" "$CONF_FILE" | grep "pidfile" > /dev/null ; then
        #        :
        #else
        #        ocf_log err "Error. \"pidfile\" entry required in the samba config file by samba OCF RA."
        #        return $OCF_ERR_GENERIC
        #fi

        return $OCF_SUCCESS
}


#
# Main
#

if [ $# -ne 1 ]; then
        usage
        exit $OCF_ERR_ARGS
fi

case $1 in
        start)  get_pid_and_conf_file
                samba_start
                ;;

        stop)   get_pid_and_conf_file
                samba_stop
                ;;

        status) get_pid_and_conf_file
                samba_status
                ;;

        monitor)get_pid_and_conf_file
                samba_monitor
                ;;

        validate-all)   get_pid_and_conf_file
                        samba_validate_all
                        ;;

        meta-data)      meta_data
                        ;;

        usage)  usage
                exit $OCF_SUCCESS
                ;;

        *)      usage
                exit $OCF_ERR_UNIMPLEMENTED
                ;;
esac
