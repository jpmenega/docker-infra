#!/bin/bash
#
# Resource script for urbackup daemon
#
# Description:  Manages urbackup daemon as an OCF resource in
#               an High Availability setup.
#
#       usage: $0 {start|stop|status|monitor|validate-all|meta-data}
#
#       The "start" arg starts urbackup.
#
#       The "stop" arg stops it.
#
# OCF parameters:
# OCF_RESKEY_binpath
# OCF_RESKEY_conffile
# OCF_RESKEY_extraconf
#
# Note:This RA requires that the urbackup config files has a "pidfile"
# entry so that it is able to act on the correct process
##########################################################################
# Initialization:

: ${OCF_FUNCTIONS_DIR=${OCF_ROOT}/resource.d/heartbeat}
. ${OCF_FUNCTIONS_DIR}/.ocf-shellfuncs

USAGE="Usage: $0 {start|stop|status|monitor|validate-all|meta-data}";

##########################################################################

usage()
{
        echo $USAGE >&2
}

meta_data()
{
cat <<END
<?xml version="1.0"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="urbackup">
<version>1.0</version>
<longdesc lang="en">
This script manages urbackup daemon
</longdesc>
<shortdesc lang="en">Manages an urbackup daemon</shortdesc>

<parameters>

<parameter name="binpath">
<longdesc lang="en">
The samba binary path.
For example, "/usr/local/sbin/urbackupclientbackend"
</longdesc>
<shortdesc lang="en">Full path to the urbackup binary</shortdesc>
<content type="string" default="/usr/local/sbin/urbackupclientbackend"/>
</parameter>

</parameters>

<actions>
<action name="start" timeout="20s"/>
<action name="stop" timeout="20s"/>
<action name="monitor" depth="0" timeout="20s" interval="60s" />
<action name="validate-all" timeout="20s"/>
<action name="meta-data"  timeout="5s"/>
</actions>
</resource-agent>
END
exit $OCF_SUCCESS
}

urbackup_status()
{
        PID=`ps -A|grep urbackupclientb|awk '$1=$1'|sed 's/ . .*//'`
        if [ -n "$PID" ]; then
               if ps -p $PID | grep urbackupclientb >/dev/null ; then
                        ocf_log info "info urbackup daemon running"
                        return $OCF_SUCCESS
                else
                        ocf_log info "urbackup daemon is not running"
                        return $OCF_NOT_RUNNING
                fi
        else
                ocf_log err "urbackup daemon is not running"
                return $OCF_NOT_RUNNING
        fi
}

urbackup_start()
{
        # if samba is running return success
        urbackup_status
        retVal=$?
        if [ $retVal -eq $OCF_SUCCESS ]; then
                exit $OCF_SUCCESS
        elif [ $retVal -ne $OCF_NOT_RUNNING ]; then
                ocf_log err "Error. Unknown status."
                exit $OCF_ERR_GENERIC
        fi

        if [ -n "$OCF_RESKEY_binpath" ]; then
                COMMAND="$OCF_RESKEY_binpath"
        else
                COMMAND="/usr/local/sbin/urbackupclientbackend"
        fi

        if ! (grep -qs '/usr/local ' /proc/mounts;) then
                mount -t glusterfs -o acl localhost:volume-samba/urbackup /usr/local
                if ! (grep -qs '/usr/local ' /proc/mounts;) then
                    ocf_log err "Error. Can't mount glusterfs partition."
                    exit $OCF_ERR_GENERIC
                fi
        fi

        service urbackupclientbackend start

        sleep 3
        urbackup_status
        retVal=$?
        if [ $retVal -eq $OCF_NOT_RUNNING ]; then
                ocf_log err "Error. urbackup daemon returned error $?."
                exit $OCF_ERR_GENERIC
        fi

        ocf_log info "Started urbackup daemon."
        exit $OCF_SUCCESS
}


urbackup_stop()
{
        if urbackup_status ; then
                service urbackupclientbackend stop
                urbackup_status
                retVal=$?
                if [ $retVal -eq $OCF_SUCCESS ]; then
                        ocf_log err "Error. Could not stop urbackup daemon."
                        return $OCF_ERR_GENERIC
                fi
        fi
        ocf_log info "Stopped urbackup daemon."
        exit $OCF_SUCCESS
}

urbackup_monitor()
{
      urbackup_status
}

urbackup_validate_all()
{
        if [ -n "$OCF_RESKEY_binpath" -a ! -x "$OCF_RESKEY_binpath" ]; then
                ocf_log err "Binary path $OCF_RESKEY_binpath does not exist."
                exit $OCF_ERR_ARGS
        fi
        if [ -n "$OCF_RESKEY_conffile" -a ! -f "$OCF_RESKEY_conffile" ]; then
                ocf_log err "Config file $OCF_RESKEY_conffile does not exist."
                exit $OCF_ERR_ARGS
        fi

        #if  grep -v "^#" "$CONF_FILE" | grep "pidfile" > /dev/null ; then
        #        :
        #else
        #        ocf_log err "Error. \"pidfile\" entry required in the samba config file by samba OCF RA."
        #        return $OCF_ERR_GENERIC
        #fi

        return $OCF_SUCCESS
}


#
# Main
#

if [ $# -ne 1 ]; then
        usage
        exit $OCF_ERR_ARGS
fi

case $1 in
        start)  urbackup_start
                ;;

        stop)   urbackup_stop
                ;;

        status) urbackup_status
                ;;

        monitor) urbackup_monitor
                ;;

        validate-all)   urbackup_validate_all
                        ;;

        meta-data)      meta_data
                        ;;

        usage)  usage
                exit $OCF_SUCCESS
                ;;

        *)      usage
                exit $OCF_ERR_UNIMPLEMENTED
                ;;
esac
