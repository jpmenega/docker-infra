- hosts: active
  become: yes
  tasks:
    - name: Turn primary node as DRBD primary
      shell: "drbdadm primary drbd"
      when: lb_primary == "yes"
      with_items: "{{ (lb_primary | default([])) }}"

    - name: Create PostgreSQL data folder
      file:
        path: /mnt/postgresql
        state: directory

    - name: Mount DRBD on primary node only
      mount:
        path: /mnt/postgresql
        src: /dev/{{ drbd_postgresql_volume }}
        opts: acl
        fstype: ext4
        state: mounted
      when: lb_primary == "yes"
      with_items: "{{ (lb_primary | default([])) }}"

    - name: Create etc folder on primary node only
      file:
        path: /mnt/postgresql/etc_postgresql
        state: directory
      when: lb_primary == "yes"
      with_items: "{{ (lb_primary | default([])) }}"

    - name: Create etc common folder on primary node only
      file:
        path: /mnt/postgresql/etc_postgresql-common
        state: directory
      when: lb_primary == "yes"
      with_items: "{{ (lb_primary | default([])) }}"

    - name: Create var folder on primary node only
      file:
        path: /mnt/postgresql/var_lib_postgresql
        state: directory
      when: lb_primary == "yes"
      with_items: "{{ (lb_primary | default([])) }}"

    - name: Create a symbolic link for etc on primary node
      file:
        src: /mnt/postgresql/etc_postgresql
        dest: /etc/postgresql
        state: link
      when: lb_primary == "yes"
      with_items: "{{ (lb_primary | default([])) }}"

    - name: Create a symbolic link for etc common on primary node
      file:
        src: /mnt/postgresql/etc_postgresql-common
        dest: /etc/postgresql-common
        state: link
      when: lb_primary == "yes"
      with_items: "{{ (lb_primary | default([])) }}"

    - name: Create a symbolic link for var on primary node
      file:
        src: /mnt/postgresql/var_lib_postgresql
        dest: /var/lib/postgresql
        state: link
      when: lb_primary == "yes"
      with_items: "{{ (lb_primary | default([])) }}"

    - name: "Install postgresql"
      apt:
       name: postgresql
       state: present
       update_cache: true

    - name: "Install postgresql-contrib"
      apt:
       name: postgresql-contrib
       state: present
       update_cache: true

    - name: Stop postgresql
      service:
        name: postgresql.service
        state: stopped

    - name: Disable service postgresql
      service:
        name: postgresql.service
        enabled: no

    - name: "Configure postgresql.conf"
      replace:
        path: /etc/postgresql/11/main/postgresql.conf
        regexp: "#listen_addresses = 'localhost'"
        replace: "listen_addresses = '*'"
      when: lb_primary == "yes"
      with_items: "{{ (lb_primary | default([])) }}"

    - name: "Configure pg_hba.conf"
      lineinfile:
        dest: "/etc/postgresql/11/main/pg_hba.conf"
        insertafter: 'host    all             all             127.0.0.1/32            md5'
        line: "host    all             all             0.0.0.0/0            md5"
      when: lb_primary == "yes"
      with_items: "{{ (lb_primary | default([])) }}"

    - name: Create a default postgres password
      shell: "sudo -u postgres psql -c "alter user postgres password 'postgres';\" > postgresql-default-password.txt"
      args:
        chdir: $HOME
        creates: postgresql-default-password.txt
      when: lb_primary == "yes"
      with_items: "{{ (lb_primary | default([])) }}"

    - name: Unmount DRBD
      mount:
        path: /mnt/postgresql
        state: unmounted
      when: lb_primary == "yes"
      with_items: "{{ (lb_primary | default([])) }}"

    - name: Turn primary node back as DRBD secondary
      shell: "drbdadm secondary drbd"
      when: lb_primary == "yes"
      with_items: "{{ (lb_primary | default([])) }}"

    - name: Delete var PostgreSQL folder from secondary nodes
      file:
        state: absent
        path: /var/lib/postgresql
      when: lb_slave == "yes"
      with_items: "{{ (lb_slave | default([])) }}"

    - name: Delete etc PostgreSQL folder from secondary nodes
      file:
        state: absent
        path: /etc/postgresql
      when: lb_slave == "yes"
      with_items: "{{ (lb_slave | default([])) }}"

    - name: Delete etc common PostgreSQL folder from secondary nodes
      file:
        state: absent
        path: /etc/postgresql-common
      when: lb_slave == "yes"
      with_items: "{{ (lb_slave | default([])) }}"

    - name: Create a symbolic link for etc for secondary nodes
      file:
        src: /mnt/postgresql/etc_postgresql
        dest: /etc/postgresql
        state: link
      when: lb_slave == "yes"
      with_items: "{{ (lb_slave | default([])) }}"

    - name: Create a symbolic link for etc common for secondary nodes
      file:
        src: /mnt/postgresql/etc_postgresql-common
        dest: /etc/postgresql-common
        state: link
      when: lb_slave == "yes"
      with_items: "{{ (lb_slave | default([])) }}"

    - name: Create a symbolic link for var for secondary nodes
      file:
        src: /mnt/postgresql/var_lib_postgresql
        dest: /var/lib/postgresql
        state: link
      when: lb_slave == "yes"
      with_items: "{{ (lb_slave | default([])) }}"

    - name: Put nodes at stand by mode
      shell: "crm node standby {{ inventory_hostname }} > postgresql-lb-standby.txt"
      args:
        chdir: $HOME
        creates: postgresql-lb-standby.txt

    - name: Download crm PostgreSQL script
      shell: "wget {{ git_source }}/postgresql/scripts/postgreSVC"
      args:
        chdir: /usr/lib/ocf/resource.d/heartbeat
        creates: /usr/lib/ocf/resource.d/heartbeat/postgreSVC

    - name: "Configure postgreSVC script - check_isolation_ip"
      replace:
        path: /usr/lib/ocf/resource.d/heartbeat/postgreSVC
        regexp: '<check_isolation_ip>'
        replace: '{{ check_isolation_ip }}'

    - name: "Configure postgreSVC script - nodePeer"
      replace:
        path: /usr/lib/ocf/resource.d/heartbeat/postgreSVC
        regexp: '<nodePeer>'
        replace: '{{ nodePeer }}'

    - name: "Configure postgreSVC script - drbd_postgresql_volume"
      replace:
        path: /usr/lib/ocf/resource.d/heartbeat/mysqlSVC
        regexp: '<drbd_postgresql_volume>'
        replace: '{{ drbd_postgresql_volume }}'

    - name: change PostgreSQL script permission
      file:
        path: /usr/lib/ocf/resource.d/heartbeat/postgreSVC
        state: touch
        mode: "u=rwx,g=rx,o=rx"

    - name: Configure pacemaker PostgreSQL VIP
      shell: "crm configure primitive postgreVIP ocf:heartbeat:IPaddr2 params ip=\"{{ cluster_vip_ip }}\" cidr_netmask=\"{{ cluster_vip_netmask }}\" nic=\"{{ cluster_vip_nic }}\" op monitor interval=\"10s\" meta migration-threshold=\"10\" > cluster-lb-vip.txt"
      args:
        chdir: $HOME
        creates: cluster-lb-vip.txt
      when: lb_primary == "yes"
      with_items: "{{ lb_primary | default([]) }}"

    - name: Configure pacemaker PostgreSQL service
      shell: "crm configure primitive postgreSVC ocf:heartbeat:postgreSVC params conffile=/etc/postgresql/11/main/postgresql.conf op monitor interval=10s timeout=60s op start timeout=60s interval=0 op stop timeout=60s interval=0 meta migration-threshold=10 > cluster-lb-service.txt"
      args:
       chdir: $HOME
       creates: cluster-lb-service.txt
      when: lb_primary == "yes"
      with_items: "{{ lb_primary | default([]) }}"

    - name: Configure pacemaker PostgreSQL group
      shell: "crm configure group grp_balancing postgreVIP postgreSVC > cluster-lb-group.txt"
      args:
       chdir: $HOME
       creates: cluster-lb-group.txt
      when: lb_primary == "yes"
      with_items: "{{ (lb_primary | default([])) }}"

    - name: Configure stickiness to avoid unnecessary move on recover
      shell: "crm configure rsc_defaults resource-stickiness=100 > postgresql-lb-stickiness.txt"
      args:
       chdir: $HOME
       creates: postgresql-lb-stickiness.txt
      when: lb_primary == "yes"
      with_items: "{{ (lb_primary | default([])) }}"

    #- name: Configure PostgreSQL less prefer postgresql02
    #  shell: "crm configure location noprefer-postgresql-node postgreSVC 5: postgresql02 > postgresql-lb-noprefer.txt"
    #  args:
    #   chdir: $HOME
    #   creates: postgresql-lb-noprefer.txt
    #  when: lb_primary == "yes"
    #  with_items: "{{ (lb_primary | default([])) }}"

    #- name: Configure PostgreSQL prefer postgresql01
    #  shell: "crm configure location prefer-postgresql-node postgreSVC 50: postgresql01 > postgresql-lb-prefer.txt"
    #  args:
    #   chdir: $HOME
    #   creates: postgresql-lb-prefer.txt
    #  when: lb_primary == "yes"
    #  with_items: "{{ (lb_primary | default([])) }}"

    - name: Download PostgreSQL Zabbix monitoring template
      get_url:
        url: "{{ git_source }}/postgresql/config/template_db_postgresql.conf"
        dest: /etc/zabbix/zabbix_agentd.d/
